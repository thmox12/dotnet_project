@page
@model isgasoir.Pages.Chapters.IndexModel
@{
    ViewData["Title"] = "Gestion des Chapitres";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 style="color: #2c3e50; font-weight: 700; text-shadow: 2px 2px 4px rgba(0,0,0,0.1);"><i class="fas fa-file-alt me-2" style="color: #667eea;"></i>Gestion des Chapitres</h2>
    <button class="btn" data-bs-toggle="modal" data-bs-target="#addChapterModal" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);">
        <i class="fas fa-plus me-1"></i>Ajouter un Chapitre
    </button>
</div>

<div class="card" style="box-shadow: 0 4px 15px rgba(0,0,0,0.1); border: none; border-radius: 15px;">
    <div class="card-header" style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 15px 15px 0 0; border: none;">
        <h5 class="mb-0" style="color: #2c3e50; font-weight: 600;">Liste des Chapitres</h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover" id="chaptersTable" style="border-radius: 10px; overflow: hidden;">
                <thead style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                    <tr>
                        <th style="border: none; font-weight: 600;">ID</th>
                        <th style="border: none; font-weight: 600;">Titre</th>
                        <th style="border: none; font-weight: 600;">Module</th>
                        <th style="border: none; font-weight: 600;">Durée</th>
                        <th style="border: none; font-weight: 600;">Activités</th>
                        <th style="border: none; font-weight: 600;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Chapters will be loaded here via JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add Chapter Modal -->
<div class="modal fade" id="addChapterModal" tabindex="-1" aria-labelledby="addChapterModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" style="border-radius: 15px; border: none; box-shadow: 0 10px 30px rgba(0,0,0,0.3);">
            <div class="modal-header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px 15px 0 0; border: none;">
                <h5 class="modal-title" id="addChapterModalLabel" style="font-weight: 600;">Ajouter un Nouveau Chapitre</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="background: #f8f9fa;">
                <form id="addChapterForm">
                    <div class="mb-3">
                        <label for="chapterTitle" class="form-label" style="color: #2c3e50; font-weight: 600;">Titre du Chapitre</label>
                        <input type="text" class="form-control" id="chapterTitle" required style="border-radius: 8px; border: 2px solid #e9ecef; padding: 12px; transition: all 0.3s ease;" onfocus="this.style.borderColor='#667eea'; this.style.boxShadow='0 0 0 0.2rem rgba(102, 126, 234, 0.25)'" onblur="this.style.borderColor='#e9ecef'; this.style.boxShadow='none'">
                    </div>
                    <div class="mb-3">
                        <label for="chapterContent" class="form-label" style="color: #2c3e50; font-weight: 600;">Contenu</label>
                        <div class="d-flex gap-2 mb-2">
                            <button type="button" class="btn btn-outline-primary btn-sm" onclick="generateContent()" id="generateContentBtn" style="border-radius: 8px; font-weight: 600;">
                                <i class="fas fa-magic me-1"></i>Générer avec IA
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="clearContent()" id="clearContentBtn" style="border-radius: 8px; font-weight: 600;">
                                <i class="fas fa-eraser me-1"></i>Effacer
                            </button>
                        </div>
                        <textarea class="form-control" id="chapterContent" rows="6" placeholder="Entrez le contenu du chapitre ou générez-le avec l'IA..." style="border-radius: 8px; border: 2px solid #e9ecef; padding: 12px; transition: all 0.3s ease;" onfocus="this.style.borderColor='#667eea'; this.style.boxShadow='0 0 0 0.2rem rgba(102, 126, 234, 0.25)'" onblur="this.style.borderColor='#e9ecef'; this.style.boxShadow='none'"></textarea>
                        <div class="form-text" style="color: #6c757d; font-weight: 500;">Vous pouvez écrire votre propre contenu ou utiliser l'IA pour le générer en fonction du titre du chapitre.</div>
                    </div>
                    <div class="mb-3">
                        <label for="chapterDuration" class="form-label" style="color: #2c3e50; font-weight: 600;">Durée (heures)</label>
                        <input type="number" class="form-control" id="chapterDuration" step="0.1" min="0" required style="border-radius: 8px; border: 2px solid #e9ecef; padding: 12px; transition: all 0.3s ease;" onfocus="this.style.borderColor='#667eea'; this.style.boxShadow='0 0 0 0.2rem rgba(102, 126, 234, 0.25)'" onblur="this.style.borderColor='#e9ecef'; this.style.boxShadow='none'">
                    </div>
                    <div class="mb-3">
                        <label for="chapterModule" class="form-label" style="color: #2c3e50; font-weight: 600;">Module</label>
                        <select class="form-select" id="chapterModule" required style="border-radius: 8px; border: 2px solid #e9ecef; padding: 12px; transition: all 0.3s ease;" onfocus="this.style.borderColor='#667eea'; this.style.boxShadow='0 0 0 0.2rem rgba(102, 126, 234, 0.25)'" onblur="this.style.borderColor='#e9ecef'; this.style.boxShadow='none'">
                            <option value="">Sélectionner un Module</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer" style="background: #f8f9fa; border-radius: 0 0 15px 15px; border: none;">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="border-radius: 8px; padding: 10px 20px; font-weight: 600;">Annuler</button>
                <button type="button" class="btn" onclick="confirmAndSaveChapter()" id="confirmSaveBtn" style="display: none; background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; border: none; border-radius: 8px; padding: 10px 20px; font-weight: 600; box-shadow: 0 4px 15px rgba(40, 167, 69, 0.4);">
                    <i class="fas fa-check me-1"></i>Confirmer & Enregistrer
                </button>
                <button type="button" class="btn" onclick="addChapter()" id="saveChapterBtn" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 8px; padding: 10px 20px; font-weight: 600; box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);">
                    <i class="fas fa-save me-1"></i>Enregistrer le Chapitre
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Chapter Content Modal -->
<div class="modal fade" id="viewChapterModal" tabindex="-1" aria-labelledby="viewChapterModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="viewChapterModalLabel">
                    <i class="fas fa-book me-2"></i>Chapter Content
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <h4 id="chapterTitleDisplay" class="text-primary"></h4>
                        <p class="text-muted mb-0">
                            <i class="fas fa-clock me-1"></i>Duration: <span id="chapterDurationDisplay"></span> hours
                        </p>
                    </div>
                    <div class="col-md-6 text-end">
                        <button class="btn btn-success me-2" onclick="downloadAsPDF()" id="downloadPdfBtn">
                            <i class="fas fa-download me-1"></i>Download PDF
                        </button>
                        <button class="btn btn-outline-primary" onclick="printContent()">
                            <i class="fas fa-print me-1"></i>Print
                        </button>
                    </div>
                </div>
                <hr>
                <div id="chapterContentDisplay" class="chapter-content">
                    <!-- Chapter content will be displayed here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<style>
    .chapter-content {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
        color: #333;
    }
    
    .chapter-content h1, .chapter-content h2, .chapter-content h3 {
        color: #2c3e50;
        margin-top: 1.5rem;
        margin-bottom: 1rem;
    }
    
    .chapter-content h1 {
        font-size: 2rem;
        border-bottom: 3px solid #3498db;
        padding-bottom: 0.5rem;
    }
    
    .chapter-content h2 {
        font-size: 1.5rem;
        color: #34495e;
    }
    
    .chapter-content h3 {
        font-size: 1.25rem;
        color: #7f8c8d;
    }
    
    .chapter-content p {
        margin-bottom: 1rem;
        text-align: justify;
    }
    
    .chapter-content ul, .chapter-content ol {
        margin-bottom: 1rem;
        padding-left: 2rem;
    }
    
    .chapter-content li {
        margin-bottom: 0.5rem;
    }
    
    .chapter-content blockquote {
        border-left: 4px solid #3498db;
        padding-left: 1rem;
        margin: 1rem 0;
        font-style: italic;
        color: #7f8c8d;
    }
    
    .chapter-content code {
        background-color: #f8f9fa;
        padding: 0.2rem 0.4rem;
        border-radius: 3px;
        font-family: 'Courier New', monospace;
    }
    
    .chapter-content pre {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 5px;
        overflow-x: auto;
        margin: 1rem 0;
    }
    
    .chapter-content strong {
        color: #2c3e50;
        font-weight: 600;
    }
    
    .chapter-content em {
        color: #7f8c8d;
    }
    
    /* Print styles */
    @@media print {
        .chapter-content {
            font-size: 12pt;
            line-height: 1.4;
        }
        
        .chapter-content h1 {
            font-size: 18pt;
            page-break-after: avoid;
        }
        
        .chapter-content h2 {
            font-size: 16pt;
            page-break-after: avoid;
        }
        
        .chapter-content h3 {
            font-size: 14pt;
            page-break-after: avoid;
        }
        
        .chapter-content p {
            orphans: 3;
            widows: 3;
        }
    }
</style>

@section Scripts {
    <script>
        // Helper functions
        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            const container = document.querySelector('.container-fluid');
            if (container) {
                container.insertBefore(alertDiv, container.firstChild);
                
                // Auto-hide after 5 seconds
                setTimeout(() => {
                    if (alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 5000);
            }
        }

        function confirmDelete(message = 'Are you sure you want to delete this item?') {
            return confirm(message);
        }

        async function apiCall(url, options = {}) {
            try {
                const response = await fetch(url, {
                    headers: {
                        'Content-Type': 'application/json',
                        ...options.headers
                    },
                    ...options
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                return await response.json();
            } catch (error) {
                console.error('API call failed:', error);
                showAlert('An error occurred while processing your request.', 'danger');
                throw error;
            }
        }

        let allModules = [];

        document.addEventListener('DOMContentLoaded', function() {
            loadModules();
            loadChapters();
        });

        async function loadModules() {
            try {
                allModules = await apiCall('/api/Modules');
                const select = document.getElementById('chapterModule');
                select.innerHTML = '<option value="">Select Module</option>';
                allModules.forEach(module => {
                    const option = document.createElement('option');
                    option.value = module.id;
                    option.textContent = module.name;
                    select.appendChild(option);
                });
            } catch (error) {
                showAlert('Failed to load modules', 'danger');
            }
        }

        async function loadChapters() {
            try {
                const chapters = await apiCall('/api/Chapitres');
                const tbody = document.querySelector('#chaptersTable tbody');
                tbody.innerHTML = '';

                chapters.forEach(chapter => {
                    // Debug: Log the chapter data to see the structure
                    console.log('Chapter data:', chapter);
                    console.log('All modules:', allModules);
                    
                    // Try different approaches to find the module
                    let module = null;
                    
                    // First try: chapter.module (if it exists)
                    if (chapter.module) {
                        module = chapter.module;
                        console.log('Found module via chapter.module:', module);
                    }
                    // Second try: find by moduleId
                    else if (chapter.moduleId) {
                        module = allModules.find(m => m.id === chapter.moduleId);
                        console.log('Found module via moduleId:', module, 'for moduleId:', chapter.moduleId);
                    }
                    // Third try: find by chapter.module?.id (fallback)
                    else if (chapter.module?.id) {
                        module = allModules.find(m => m.id === chapter.module.id);
                        console.log('Found module via chapter.module.id:', module);
                    }
                    
                    if (!module) {
                        console.log('No module found for chapter:', chapter.id);
                    }
                    
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${chapter.id}</td>
                        <td>${chapter.title}</td>
                        <td>${module ? module.name : 'N/A'}</td>
                        <td>${chapter.duree}h</td>
                        <td><span class="badge bg-info">${chapter.activities ? chapter.activities.length : 0}</span></td>
                        <td>
                            <button class="btn btn-sm btn-outline-info me-1" onclick="viewChapter(${chapter.id})" title="View Content">
                                <i class="fas fa-book-open"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-primary me-1" onclick="viewChapter(${chapter.id})" title="View Details">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteChapter(${chapter.id})" title="Delete">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            } catch (error) {
                showAlert('Failed to load chapters', 'danger');
            }
        }

        async function addChapter() {
            const formData = {
                title: document.getElementById('chapterTitle').value,
                content: document.getElementById('chapterContent').value,
                duree: parseFloat(document.getElementById('chapterDuration').value)
            };

            const moduleId = document.getElementById('chapterModule').value;

            try {
                await apiCall(`/api/Chapitres/${moduleId}`, {
                    method: 'POST',
                    body: JSON.stringify(formData)
                });
                
                showAlert('Chapter added successfully', 'success');
                bootstrap.Modal.getInstance(document.getElementById('addChapterModal')).hide();
                document.getElementById('addChapterForm').reset();
                loadChapters();
            } catch (error) {
                showAlert('Failed to add chapter', 'danger');
            }
        }

        async function viewChapter(id) {
            try {
                const chapter = await apiCall(`/api/Chapitres/${id}`);
                
                // Display chapter information in the modal
                document.getElementById('chapterTitleDisplay').textContent = chapter.title;
                document.getElementById('chapterDurationDisplay').textContent = chapter.duree;
                
                // Format and display the content
                const contentDiv = document.getElementById('chapterContentDisplay');
                contentDiv.innerHTML = formatChapterContent(chapter.content);
                
                // Show the modal
                new bootstrap.Modal(document.getElementById('viewChapterModal')).show();
                
            } catch (error) {
                showAlert('Failed to load chapter details', 'danger');
            }
        }

        function formatChapterContent(content) {
            if (!content) return '<p class="text-muted">No content available for this chapter.</p>';
            
            // Convert plain text to HTML with basic formatting
            let formattedContent = content
                .replace(/\n\n/g, '</p><p>')
                .replace(/\n/g, '<br>')
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/^# (.*$)/gm, '<h1>$1</h1>')
                .replace(/^## (.*$)/gm, '<h2>$1</h2>')
                .replace(/^### (.*$)/gm, '<h3>$1</h3>')
                .replace(/^- (.*$)/gm, '<li>$1</li>')
                .replace(/^\d+\. (.*$)/gm, '<li>$1</li>');
            
            // Wrap in paragraphs
            if (!formattedContent.startsWith('<')) {
                formattedContent = '<p>' + formattedContent + '</p>';
            }
            
            return formattedContent;
        }

        function downloadAsPDF() {
            const title = document.getElementById('chapterTitleDisplay').textContent;
            const content = document.getElementById('chapterContentDisplay').innerHTML;
            const duration = document.getElementById('chapterDurationDisplay').textContent;
            
            // Create a new window for PDF generation
            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>${title}</title>
                    <style>
                        body {
                            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                            line-height: 1.6;
                            color: #333;
                            max-width: 800px;
                            margin: 0 auto;
                            padding: 20px;
                        }
                        .header {
                            text-align: center;
                            border-bottom: 3px solid #3498db;
                            padding-bottom: 20px;
                            margin-bottom: 30px;
                        }
                        .header h1 {
                            color: #2c3e50;
                            margin: 0;
                            font-size: 2.5rem;
                        }
                        .header .meta {
                            color: #7f8c8d;
                            margin-top: 10px;
                        }
                        .content {
                            font-size: 14pt;
                            line-height: 1.8;
                        }
                        .content h1, .content h2, .content h3 {
                            color: #2c3e50;
                            margin-top: 2rem;
                            margin-bottom: 1rem;
                        }
                        .content h1 {
                            font-size: 1.8rem;
                            border-bottom: 2px solid #3498db;
                            padding-bottom: 0.5rem;
                        }
                        .content h2 {
                            font-size: 1.4rem;
                        }
                        .content h3 {
                            font-size: 1.2rem;
                        }
                        .content p {
                            margin-bottom: 1rem;
                            text-align: justify;
                        }
                        .content ul, .content ol {
                            margin-bottom: 1rem;
                            padding-left: 2rem;
                        }
                        .content li {
                            margin-bottom: 0.5rem;
                        }
                        .content strong {
                            color: #2c3e50;
                            font-weight: 600;
                        }
                        .content em {
                            color: #7f8c8d;
                        }
                        .footer {
                            margin-top: 50px;
                            text-align: center;
                            color: #7f8c8d;
                            font-size: 12pt;
                            border-top: 1px solid #ecf0f1;
                            padding-top: 20px;
                        }
                        @@media print {
                            body { margin: 0; padding: 15px; }
                            .header { page-break-after: avoid; }
                            .content h1, .content h2, .content h3 { page-break-after: avoid; }
                        }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>${title}</h1>
                        <div class="meta">Duration: ${duration} hours</div>
                    </div>
                    <div class="content">
                        ${content}
                    </div>
                    <div class="footer">
                        <p>Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>
                    </div>
                </body>
                </html>
            `);
            
            printWindow.document.close();
            
            // Wait for content to load, then trigger print dialog
            setTimeout(() => {
                printWindow.print();
            }, 500);
        }

        function printContent() {
            downloadAsPDF();
        }

        async function deleteChapter(id) {
            if (confirmDelete('Are you sure you want to delete this chapter?')) {
                try {
                    await apiCall(`/api/Chapitres/${id}`, {
                        method: 'DELETE'
                    });
                    
                    showAlert('Chapter deleted successfully', 'success');
                    loadChapters();
                } catch (error) {
                    showAlert('Failed to delete chapter', 'danger');
                }
            }
        }

        // LLM Content Generation Functions
        async function generateContent() {
            const title = document.getElementById('chapterTitle').value;
            const generateBtn = document.getElementById('generateContentBtn');
            const contentTextarea = document.getElementById('chapterContent');
            
            if (!title.trim()) {
                showAlert('Please enter a chapter title first', 'warning');
                return;
            }

            // Show loading state
            const originalText = generateBtn.innerHTML;
            generateBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Generating...';
            generateBtn.disabled = true;

            try {
                // Create a prompt for the LLM
                const prompt = `Generate comprehensive educational content for a chapter titled "${title}". 
                The content should be:
                - Educational and informative
                - Well-structured with clear sections
                - Appropriate for students
                - Include key concepts, explanations, and examples
                - Be approximately 500-800 words
                
                Format the content with clear headings and paragraphs.`;

                // Call the LLM API
                const response = await apiCall('/api/LLM/generate', {
                    method: 'POST',
                    body: JSON.stringify({ prompt: prompt })
                });

                // Set the generated content
                contentTextarea.value = response.generatedText || response;
                
                // Show confirmation buttons
                document.getElementById('saveChapterBtn').style.display = 'none';
                document.getElementById('confirmSaveBtn').style.display = 'inline-block';
                
                showAlert('Content generated successfully! Please review and confirm before saving.', 'success');
                
            } catch (error) {
                console.error('Error generating content:', error);
                showAlert('Failed to generate content. Please try again.', 'danger');
            } finally {
                // Restore button state
                generateBtn.innerHTML = originalText;
                generateBtn.disabled = false;
            }
        }

        function clearContent() {
            document.getElementById('chapterContent').value = '';
            document.getElementById('saveChapterBtn').style.display = 'inline-block';
            document.getElementById('confirmSaveBtn').style.display = 'none';
        }

        async function confirmAndSaveChapter() {
            // This is the same as addChapter but with confirmation
            await addChapter();
        }
    </script>
}
