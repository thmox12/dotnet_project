@page
@model isgasoir.Pages.Modules.IndexModel
@{
    ViewData["Title"] = "Modules Management";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-book me-2"></i>Modules Management</h2>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addModuleModal">
        <i class="fas fa-plus me-1"></i>Add New Module
    </button>
</div>

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Modules List</h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover" id="modulesTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Coefficient</th>
                        <th>Semester</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Modules will be loaded here via JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add Module Modal -->
<div class="modal fade" id="addModuleModal" tabindex="-1" aria-labelledby="addModuleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addModuleModalLabel">Add New Module</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addModuleForm">
                    <div class="mb-3">
                        <label for="moduleName" class="form-label">Module Name</label>
                        <input type="text" class="form-control" id="moduleName" required>
                    </div>
                    <div class="mb-3">
                        <label for="moduleCoeff" class="form-label">Coefficient</label>
                        <input type="number" class="form-control" id="moduleCoeff" step="0.1" min="0" required>
                    </div>
                    <div class="mb-3">
                        <label for="moduleSemester" class="form-label">Semester</label>
                        <select class="form-select" id="moduleSemester" required>
                            <option value="">Select Semester</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addModule()">
                    <i class="fas fa-save me-1"></i>Save Module
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Helper functions
        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            const container = document.querySelector('.container-fluid');
            if (container) {
                container.insertBefore(alertDiv, container.firstChild);
                
                // Auto-hide after 5 seconds
                setTimeout(() => {
                    if (alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 5000);
            }
        }

        function confirmDelete(message = 'Are you sure you want to delete this item?') {
            return confirm(message);
        }

        async function apiCall(url, options = {}) {
            try {
                const response = await fetch(url, {
                    headers: {
                        'Content-Type': 'application/json',
                        ...options.headers
                    },
                    ...options
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                return await response.json();
            } catch (error) {
                console.error('API call failed:', error);
                showAlert('An error occurred while processing your request.', 'danger');
                throw error;
            }
        }

        let allSemesters = [];

        document.addEventListener('DOMContentLoaded', function() {
            loadSemesters();
            loadModules();
        });

        async function loadSemesters() {
            try {
                allSemesters = await apiCall('/api/Semestre');
                const select = document.getElementById('moduleSemester');
                select.innerHTML = '<option value="">Select Semester</option>';
                allSemesters.forEach(semester => {
                    const option = document.createElement('option');
                    option.value = semester.id;
                    option.textContent = semester.name;
                    select.appendChild(option);
                });
            } catch (error) {
                showAlert('Failed to load semesters', 'danger');
            }
        }

        async function loadModules() {
            try {
                const modules = await apiCall('/api/Modules');
                const tbody = document.querySelector('#modulesTable tbody');
                tbody.innerHTML = '';

                modules.forEach(module => {
                    // Debug: Log the module data to see the structure
                    console.log('Module data:', module);
                    console.log('All semesters:', allSemesters);
                    
                    // Handle semester data - try different approaches
                    let semesterName = 'N/A';
                    
                    // Try to find semester by checking all semesters for modules
                    for (let semester of allSemesters) {
                        if (semester.modules && semester.modules.some(m => m.id === module.id)) {
                            semesterName = semester.name;
                            console.log('Found semester by module relationship:', semesterName);
                            break;
                        }
                    }
                    
                    // If still not found, try other approaches
                    if (semesterName === 'N/A') {
                        if (module.semId) {
                            const semester = allSemesters.find(s => s.id === module.semId);
                            semesterName = semester ? semester.name : 'N/A';
                            console.log('Found semester by semId:', semesterName, 'for semId:', module.semId);
                        } else if (module.sem && module.sem.name) {
                            semesterName = module.sem.name;
                            console.log('Found semester in module.sem:', module.sem.name);
                        } else {
                            console.log('No semester data found for module:', module.id);
                        }
                    }
                    
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${module.id}</td>
                        <td>${module.name}</td>
                        <td>${module.coiff}</td>
                        <td>${semesterName}</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" onclick="viewModule(${module.id})">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteModule(${module.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            } catch (error) {
                showAlert('Failed to load modules', 'danger');
            }
        }

        async function addModule() {
            const formData = {
                name: document.getElementById('moduleName').value,
                coiff: parseFloat(document.getElementById('moduleCoeff').value)
            };

            const semesterId = document.getElementById('moduleSemester').value;

            try {
                await apiCall(`/api/Modules/${semesterId}`, {
                    method: 'POST',
                    body: JSON.stringify(formData)
                });
                
                showAlert('Module added successfully', 'success');
                bootstrap.Modal.getInstance(document.getElementById('addModuleModal')).hide();
                document.getElementById('addModuleForm').reset();
                loadModules();
            } catch (error) {
                showAlert('Failed to add module', 'danger');
            }
        }

        async function viewModule(id) {
            try {
                const module = await apiCall(`/api/Modules/${id}`);
                showAlert(`Module: ${module.name} - Coefficient: ${module.coiff}`, 'info');
            } catch (error) {
                showAlert('Failed to load module details', 'danger');
            }
        }

        async function deleteModule(id) {
            if (confirmDelete('Are you sure you want to delete this module?')) {
                try {
                    const response = await fetch(`/api/Modules/${id}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        showAlert('Module deleted successfully', 'success');
                        loadModules();
                    } else {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                } catch (error) {
                    console.error('Delete error:', error);
                    showAlert('Failed to delete module: ' + (error.message || 'Unknown error'), 'danger');
                }
            }
        }
    </script>
}
