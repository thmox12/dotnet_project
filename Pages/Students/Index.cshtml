@page
@model isgasoir.Pages.Students.IndexModel
@{
    ViewData["Title"] = "Students Management";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-users me-2"></i>Students Management</h2>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addStudentModal">
        <i class="fas fa-plus me-1"></i>Add New Student
    </button>
</div>

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Students List</h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover" id="studentsTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Gender</th>
                        <th>Date of Birth</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Students will be loaded here via JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add Student Modal -->
<div class="modal fade" id="addStudentModal" tabindex="-1" aria-labelledby="addStudentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addStudentModalLabel">Add New Student</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addStudentForm">
                    <div class="mb-3">
                        <label for="firstName" class="form-label">First Name</label>
                        <input type="text" class="form-control" id="firstName" required>
                    </div>
                    <div class="mb-3">
                        <label for="lastName" class="form-label">Last Name</label>
                        <input type="text" class="form-control" id="lastName" required>
                    </div>
                    <div class="mb-3">
                        <label for="gender" class="form-label">Gender</label>
                        <select class="form-select" id="gender" required>
                            <option value="">Select Gender</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="dateOfBirth" class="form-label">Date of Birth</label>
                        <input type="date" class="form-control" id="dateOfBirth" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addStudent()">
                    <i class="fas fa-save me-1"></i>Save Student
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Student Modal -->
<div class="modal fade" id="editStudentModal" tabindex="-1" aria-labelledby="editStudentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editStudentModalLabel">Edit Student</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editStudentForm">
                    <input type="hidden" id="editStudentId">
                    <div class="mb-3">
                        <label for="editFirstName" class="form-label">First Name</label>
                        <input type="text" class="form-control" id="editFirstName" required>
                    </div>
                    <div class="mb-3">
                        <label for="editLastName" class="form-label">Last Name</label>
                        <input type="text" class="form-control" id="editLastName" required>
                    </div>
                    <div class="mb-3">
                        <label for="editGender" class="form-label">Gender</label>
                        <select class="form-select" id="editGender" required>
                            <option value="">Select Gender</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editDateOfBirth" class="form-label">Date of Birth</label>
                        <input type="date" class="form-control" id="editDateOfBirth" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="updateStudent()">
                    <i class="fas fa-save me-1"></i>Update Student
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Helper functions
        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            const container = document.querySelector('.container-fluid');
            if (container) {
                container.insertBefore(alertDiv, container.firstChild);
                
                // Auto-hide after 5 seconds
                setTimeout(() => {
                    if (alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 5000);
            }
        }

        function confirmDelete(message = 'Are you sure you want to delete this item?') {
            return confirm(message);
        }

        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
        }

        async function apiCall(url, options = {}) {
            try {
                const response = await fetch(url, {
                    headers: {
                        'Content-Type': 'application/json',
                        ...options.headers
                    },
                    ...options
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                return await response.json();
            } catch (error) {
                console.error('API call failed:', error);
                showAlert('An error occurred while processing your request.', 'danger');
                throw error;
            }
        }

        // Load students on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadStudents();
        });

        async function loadStudents() {
            try {
                const students = await apiCall('/api/StudentApi');
                const tbody = document.querySelector('#studentsTable tbody');
                tbody.innerHTML = '';

                students.forEach(student => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${student.id}</td>
                        <td>${student.prenom}</td>
                        <td>${student.nom}</td>
                        <td>${student.gender}</td>
                        <td>${formatDate(student.date)}</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" onclick="editStudent(${student.id})">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteStudent(${student.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            } catch (error) {
                showAlert('Failed to load students', 'danger');
            }
        }

        async function addStudent() {
            const form = document.getElementById('addStudentForm');
            const formData = {
                nom: document.getElementById('lastName').value,
                prenom: document.getElementById('firstName').value,
                gender: document.getElementById('gender').value,
                date: document.getElementById('dateOfBirth').value
            };

            try {
                await apiCall('/api/StudentApi', {
                    method: 'POST',
                    body: JSON.stringify(formData)
                });
                
                showAlert('Student added successfully', 'success');
                bootstrap.Modal.getInstance(document.getElementById('addStudentModal')).hide();
                form.reset();
                loadStudents();
            } catch (error) {
                showAlert('Failed to add student', 'danger');
            }
        }

        async function editStudent(id) {
            try {
                const student = await apiCall(`/api/StudentApi/${id}`);
                document.getElementById('editStudentId').value = student.id;
                document.getElementById('editFirstName').value = student.prenom;
                document.getElementById('editLastName').value = student.nom;
                document.getElementById('editGender').value = student.gender;
                
                // Handle date formatting properly
                let dateValue = '';
                if (student.date) {
                    const date = new Date(student.date);
                    dateValue = date.toISOString().split('T')[0];
                }
                document.getElementById('editDateOfBirth').value = dateValue;
                
                new bootstrap.Modal(document.getElementById('editStudentModal')).show();
            } catch (error) {
                console.error('Error loading student:', error);
                showAlert('Failed to load student data', 'danger');
            }
        }

        async function updateStudent() {
            const id = document.getElementById('editStudentId').value;
            const formData = {
                id: parseInt(id),
                nom: document.getElementById('editLastName').value,
                prenom: document.getElementById('editFirstName').value,
                gender: document.getElementById('editGender').value,
                date: document.getElementById('editDateOfBirth').value
            };

            try {
                const response = await apiCall(`/api/StudentApi/${id}`, {
                    method: 'PUT',
                    body: JSON.stringify(formData)
                });
                
                showAlert('Student updated successfully', 'success');
                bootstrap.Modal.getInstance(document.getElementById('editStudentModal')).hide();
                loadStudents();
            } catch (error) {
                console.error('Error updating student:', error);
                showAlert('Failed to update student: ' + (error.message || 'Unknown error'), 'danger');
            }
        }

        async function deleteStudent(id) {
            if (confirmDelete('Are you sure you want to delete this student?')) {
                try {
                    const response = await fetch(`/api/StudentApi/${id}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        showAlert('Student deleted successfully', 'success');
                        loadStudents();
                    } else {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                } catch (error) {
                    console.error('Delete error:', error);
                    showAlert('Failed to delete student: ' + (error.message || 'Unknown error'), 'danger');
                }
            }
        }
    </script>
}
