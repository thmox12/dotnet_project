@page
@model isgasoir.Pages.Semesters.IndexModel
@{
    ViewData["Title"] = "Gestion des Semestres";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 style="color: #2c3e50; text-shadow: 1px 1px 2px rgba(0,0,0,0.1);"><i class="fas fa-calendar-alt me-2" style="color: #667eea;"></i>Gestion des Semestres</h2>
    <button class="btn" data-bs-toggle="modal" data-bs-target="#addSemesterModal" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);">
        <i class="fas fa-plus me-1"></i>Ajouter un Semestre
    </button>
</div>

<div class="card" style="box-shadow: 0 4px 15px rgba(0,0,0,0.1); border: none; border-radius: 15px;">
    <div class="card-header" style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 15px 15px 0 0; border: none;">
        <h5 class="mb-0" style="color: #2c3e50; font-weight: 600;">Liste des Semestres</h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover" id="semestersTable" style="border-radius: 10px; overflow: hidden;">
                <thead style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                    <tr>
                        <th style="border: none; font-weight: 600;">ID</th>
                        <th style="border: none; font-weight: 600;">Nom</th>
                        <th style="border: none; font-weight: 600;">Nombre de Modules</th>
                        <th style="border: none; font-weight: 600;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Semesters will be loaded here via JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add Semester Modal -->
<div class="modal fade" id="addSemesterModal" tabindex="-1" aria-labelledby="addSemesterModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="border-radius: 15px; border: none; box-shadow: 0 10px 30px rgba(0,0,0,0.3);">
            <div class="modal-header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px 15px 0 0; border: none;">
                <h5 class="modal-title" id="addSemesterModalLabel" style="font-weight: 600;">Ajouter un Nouveau Semestre</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="background: #f8f9fa;">
                <form id="addSemesterForm">
                    <div class="mb-3">
                        <label for="semesterName" class="form-label" style="color: #2c3e50; font-weight: 600;">Nom du Semestre</label>
                        <input type="text" class="form-control" id="semesterName" required style="border-radius: 8px; border: 2px solid #e9ecef; padding: 12px; transition: all 0.3s ease;" onfocus="this.style.borderColor='#667eea'; this.style.boxShadow='0 0 0 0.2rem rgba(102, 126, 234, 0.25)'" onblur="this.style.borderColor='#e9ecef'; this.style.boxShadow='none'">
                    </div>
                </form>
            </div>
            <div class="modal-footer" style="background: #f8f9fa; border-radius: 0 0 15px 15px; border: none;">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="border-radius: 8px; padding: 10px 20px; font-weight: 600;">Annuler</button>
                <button type="button" class="btn" onclick="addSemester()" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 8px; padding: 10px 20px; font-weight: 600; box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);">
                    <i class="fas fa-save me-1"></i>Enregistrer le Semestre
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Helper functions
        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            const container = document.querySelector('.container-fluid');
            if (container) {
                container.insertBefore(alertDiv, container.firstChild);
                
                // Auto-hide after 5 seconds
                setTimeout(() => {
                    if (alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 5000);
            }
        }

        function confirmDelete(message = 'Are you sure you want to delete this item?') {
            return confirm(message);
        }

        async function apiCall(url, options = {}) {
            try {
                const response = await fetch(url, {
                    headers: {
                        'Content-Type': 'application/json',
                        ...options.headers
                    },
                    ...options
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                return await response.json();
            } catch (error) {
                console.error('API call failed:', error);
                showAlert('An error occurred while processing your request.', 'danger');
                throw error;
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            loadSemesters();
        });

        async function loadSemesters() {
            try {
                const semesters = await apiCall('/api/Semestre');
                const tbody = document.querySelector('#semestersTable tbody');
                tbody.innerHTML = '';

                semesters.forEach(semester => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${semester.id}</td>
                        <td>${semester.name}</td>
                        <td><span class="badge bg-info">${semester.modules ? semester.modules.length : 0}</span></td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" onclick="viewSemester(${semester.id})">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteSemester(${semester.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            } catch (error) {
                showAlert('Failed to load semesters', 'danger');
            }
        }

        async function addSemester() {
            const formData = {
                name: document.getElementById('semesterName').value
            };

            try {
                await apiCall('/api/Semestre', {
                    method: 'POST',
                    body: JSON.stringify(formData)
                });
                
                showAlert('Semester added successfully', 'success');
                bootstrap.Modal.getInstance(document.getElementById('addSemesterModal')).hide();
                document.getElementById('addSemesterForm').reset();
                loadSemesters();
            } catch (error) {
                showAlert('Failed to add semester', 'danger');
            }
        }

        async function viewSemester(id) {
            try {
                const semester = await apiCall(`/api/Semestre/${id}`);
                showAlert(`Semester: ${semester.name} - Modules: ${semester.modules ? semester.modules.length : 0}`, 'info');
            } catch (error) {
                showAlert('Failed to load semester details', 'danger');
            }
        }

        async function deleteSemester(id) {
            if (confirmDelete('Are you sure you want to delete this semester?')) {
                try {
                    const response = await fetch(`/api/Semestre/${id}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        showAlert('Semester deleted successfully', 'success');
                        loadSemesters();
                    } else {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                } catch (error) {
                    console.error('Delete error:', error);
                    showAlert('Failed to delete semester: ' + (error.message || 'Unknown error'), 'danger');
                }
            }
        }
    </script>
}
